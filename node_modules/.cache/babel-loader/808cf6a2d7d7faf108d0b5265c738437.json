{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/chaowu/Desktop/CS349/tictactoe/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      player1: 1,\n      player2: 2,\n      currentPlayer: null,\n      board: [],\n      gameOver: false,\n      message: ''\n    }; // Bind play function to App component\n\n    this.play = this.play.bind(this);\n  } // Starts new game\n\n\n  initBoard() {\n    // Create a blank 6x7 matrix\n    let board = [];\n\n    for (let r = 0; r < 6; r++) {\n      let row = [];\n\n      for (let c = 0; c < 7; c++) {\n        row.push(null);\n      }\n\n      board.push(row);\n    }\n\n    this.setState({\n      board,\n      currentPlayer: this.state.player1,\n      gameOver: false,\n      message: ''\n    });\n  }\n\n  togglePlayer() {\n    return this.state.currentPlayer === this.state.player1 ? this.state.player2 : this.state.player1;\n  }\n\n  play(c) {\n    if (!this.state.gameOver) {\n      // Place piece on board\n      let board = this.state.board;\n\n      for (let r = 5; r >= 0; r--) {\n        if (!board[r][c]) {\n          board[r][c] = this.state.currentPlayer;\n          break;\n        }\n      } // Check status of board\n\n\n      let result = this.checkAll(board);\n\n      if (result === this.state.player1) {\n        this.setState({\n          board,\n          gameOver: true,\n          message: 'Player 1 (red) wins!'\n        });\n      } else if (result === this.state.player2) {\n        this.setState({\n          board,\n          gameOver: true,\n          message: 'Player 2 (yellow) wins!'\n        });\n      } else if (result === 'draw') {\n        this.setState({\n          board,\n          gameOver: true,\n          message: 'Draw game.'\n        });\n      } else {\n        this.setState({\n          board,\n          currentPlayer: this.togglePlayer()\n        });\n      }\n    } else {\n      this.setState({\n        message: 'Game over. Please start a new game.'\n      });\n    }\n  }\n\n  checkVertical(board) {\n    // Check only if row is 3 or greater\n    for (let r = 3; r < 6; r++) {\n      for (let c = 0; c < 7; c++) {\n        if (board[r][c]) {\n          if (board[r][c] === board[r - 1][c] && board[r][c] === board[r - 2][c] && board[r][c] === board[r - 3][c]) {\n            return board[r][c];\n          }\n        }\n      }\n    }\n  }\n\n  checkHorizontal(board) {\n    // Check only if column is 3 or less\n    for (let r = 0; r < 6; r++) {\n      for (let c = 0; c < 4; c++) {\n        if (board[r][c]) {\n          if (board[r][c] === board[r][c + 1] && board[r][c] === board[r][c + 2] && board[r][c] === board[r][c + 3]) {\n            return board[r][c];\n          }\n        }\n      }\n    }\n  }\n\n  checkDiagonalRight(board) {\n    // Check only if row is 3 or greater AND column is 3 or less\n    for (let r = 3; r < 6; r++) {\n      for (let c = 0; c < 4; c++) {\n        if (board[r][c]) {\n          if (board[r][c] === board[r - 1][c + 1] && board[r][c] === board[r - 2][c + 2] && board[r][c] === board[r - 3][c + 3]) {\n            return board[r][c];\n          }\n        }\n      }\n    }\n  }\n\n  checkDiagonalLeft(board) {\n    // Check only if row is 3 or greater AND column is 3 or greater\n    for (let r = 3; r < 6; r++) {\n      for (let c = 3; c < 7; c++) {\n        if (board[r][c]) {\n          if (board[r][c] === board[r - 1][c - 1] && board[r][c] === board[r - 2][c - 2] && board[r][c] === board[r - 3][c - 3]) {\n            return board[r][c];\n          }\n        }\n      }\n    }\n  }\n\n  checkDraw(board) {\n    for (let r = 0; r < 6; r++) {\n      for (let c = 0; c < 7; c++) {\n        if (board[r][c] === null) {\n          return null;\n        }\n      }\n    }\n\n    return 'draw';\n  }\n\n  checkAll(board) {\n    return this.checkVertical(board) || this.checkDiagonalRight(board) || this.checkDiagonalLeft(board) || this.checkHorizontal(board) || this.checkDraw(board);\n  }\n\n  componentWillMount() {\n    this.initBoard();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button\",\n        onClick: () => {\n          this.initBoard();\n        },\n        children: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: this.state.board.map((row, i) => /*#__PURE__*/_jsxDEV(Row, {\n            row: row,\n            play: this.play\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 48\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"message\",\n        children: this.state.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this);\n  }\n\n} // Row component\n\n\nconst Row = ({\n  row,\n  play\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: row.map((cell, i) => /*#__PURE__*/_jsxDEV(Cell, {\n      value: cell,\n      columnIndex: i,\n      play: play\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 29\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Row;\n\nconst Cell = ({\n  value,\n  columnIndex,\n  play\n}) => {\n  let color = 'white';\n\n  if (value === 1) {\n    color = 'red';\n  } else if (value === 2) {\n    color = 'yellow';\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"td\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cell\",\n      onClick: () => {\n        play(columnIndex);\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: color\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = Cell;\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 195,\n  columnNumber: 17\n}, this), document.getElementById('main'));\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Row\");\n$RefreshReg$(_c2, \"Cell\");","map":{"version":3,"sources":["/Users/chaowu/Desktop/CS349/tictactoe/src/index.js"],"names":["React","ReactDOM","App","Component","constructor","props","state","player1","player2","currentPlayer","board","gameOver","message","play","bind","initBoard","r","row","c","push","setState","togglePlayer","result","checkAll","checkVertical","checkHorizontal","checkDiagonalRight","checkDiagonalLeft","checkDraw","componentWillMount","render","map","i","Row","cell","Cell","value","columnIndex","color","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      player1: 1,\n      player2: 2,\n      currentPlayer: null,\n      board: [],\n      gameOver: false,\n      message: ''\n    };\n    \n    // Bind play function to App component\n    this.play = this.play.bind(this);\n  }\n  \n  // Starts new game\n  initBoard() {\n    // Create a blank 6x7 matrix\n    let board = [];\n    for (let r = 0; r < 6; r++) {\n      let row = [];\n      for (let c = 0; c < 7; c++) { row.push(null) }\n      board.push(row);\n    }\n    \n    this.setState({\n      board,\n      currentPlayer: this.state.player1,\n      gameOver: false,\n      message: ''\n    });\n  }\n  \n  togglePlayer() {\n    return (this.state.currentPlayer === this.state.player1) ? this.state.player2 : this.state.player1;\n  }\n  \n  play(c) {\n    if (!this.state.gameOver) {\n      // Place piece on board\n      let board = this.state.board;\n      for (let r = 5; r >= 0; r--) {\n        if (!board[r][c]) {\n          board[r][c] = this.state.currentPlayer;\n          break;\n        }\n      }\n\n      // Check status of board\n      let result = this.checkAll(board);\n      if (result === this.state.player1) {\n        this.setState({ board, gameOver: true, message: 'Player 1 (red) wins!' });\n      } else if (result === this.state.player2) {\n        this.setState({ board, gameOver: true, message: 'Player 2 (yellow) wins!' });\n      } else if (result === 'draw') {\n        this.setState({ board, gameOver: true, message: 'Draw game.' });\n      } else {\n        this.setState({ board, currentPlayer: this.togglePlayer() });\n      }\n    } else {\n      this.setState({ message: 'Game over. Please start a new game.' });\n    }\n  }\n  \n  checkVertical(board) {\n    // Check only if row is 3 or greater\n    for (let r = 3; r < 6; r++) {\n      for (let c = 0; c < 7; c++) {\n        if (board[r][c]) {\n          if (board[r][c] === board[r - 1][c] &&\n              board[r][c] === board[r - 2][c] &&\n              board[r][c] === board[r - 3][c]) {\n            return board[r][c];    \n          }\n        }\n      }\n    }\n  }\n  \n  checkHorizontal(board) {\n    // Check only if column is 3 or less\n    for (let r = 0; r < 6; r++) {\n      for (let c = 0; c < 4; c++) {\n        if (board[r][c]) {\n          if (board[r][c] === board[r][c + 1] && \n              board[r][c] === board[r][c + 2] &&\n              board[r][c] === board[r][c + 3]) {\n            return board[r][c];\n          }\n        }\n      }\n    }\n  }\n  \n  checkDiagonalRight(board) {\n    // Check only if row is 3 or greater AND column is 3 or less\n    for (let r = 3; r < 6; r++) {\n      for (let c = 0; c < 4; c++) {\n        if (board[r][c]) {\n          if (board[r][c] === board[r - 1][c + 1] &&\n              board[r][c] === board[r - 2][c + 2] &&\n              board[r][c] === board[r - 3][c + 3]) {\n            return board[r][c];\n          }\n        }\n      }\n    }\n  }\n  \n  checkDiagonalLeft(board) {\n    // Check only if row is 3 or greater AND column is 3 or greater\n    for (let r = 3; r < 6; r++) {\n      for (let c = 3; c < 7; c++) {\n        if (board[r][c]) {\n          if (board[r][c] === board[r - 1][c - 1] &&\n              board[r][c] === board[r - 2][c - 2] &&\n              board[r][c] === board[r - 3][c - 3]) {\n            return board[r][c];\n          }\n        }\n      }\n    }\n  }\n  \n  checkDraw(board) {\n    for (let r = 0; r < 6; r++) {\n      for (let c = 0; c < 7; c++) {\n        if (board[r][c] === null) {\n          return null;\n        }\n      }\n    }\n    return 'draw';    \n  }\n  \n  checkAll(board) {\n    return this.checkVertical(board) || this.checkDiagonalRight(board) || this.checkDiagonalLeft(board) || this.checkHorizontal(board) || this.checkDraw(board);\n  }\n  \n  componentWillMount() {\n    this.initBoard();\n  }\n  \n  render() {\n    return (\n      <div>\n        <div className=\"button\" onClick={() => {this.initBoard()}}>New Game</div>\n        \n        <table>\n          <thead>\n          </thead>\n          <tbody>\n            {this.state.board.map((row, i) => (<Row key={i} row={row} play={this.play} />))}\n          </tbody>\n        </table>\n        \n        <p className=\"message\">{this.state.message}</p>\n      </div>\n    );\n  }\n}\n\n// Row component\nconst Row = ({ row, play }) => {\n  return (\n    <tr>\n      {row.map((cell, i) => <Cell key={i} value={cell} columnIndex={i} play={play} />)}\n    </tr>\n  );\n};\n\nconst Cell = ({ value, columnIndex, play }) => {\n  let color = 'white';\n  if (value === 1) {\n    color = 'red';\n  } else if (value === 2) {\n    color = 'yellow';\n  }\n    \n  return (\n    <td>\n      <div className=\"cell\" onClick={() => {play(columnIndex)}}>\n        <div className={color}></div>\n      </div>\n    </td>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('main'));"]},"metadata":{},"sourceType":"module"}